{"version":3,"sources":["components/ErrorView.js","components/ActionButtons.js","App.js","reportWebVitals.js","index.js"],"names":["ErrorView","_ref","onRetry","React","createElement","className","onClick","alt","src","ActionButtons","onCancel","onUpdate","App","loading","setLoading","useState","error","setError","data","setData","lists","setLists","listOrder","setListOrder","selectedLists","setSelectedLists","newListView","setNewListView","newListKey","setNewListKey","showCreateNewList","setShowCreateNewList","console","log","useEffect","fetchData","async","response","axios","get","groupedLists","reduce","acc","item","list_number","push","sortedListNumbers","Object","keys","sort","a","b","err","handleMoveItem","fromList","toList","arguments","length","undefined","prevLists","updatedLists","_objectSpread","updatedFromList","filter","i","id","some","prevOrder","includes","RotatingLines","strokeColor","strokeWidth","animationDuration","width","visible","Fragment","type","handleCreateNewList","document","getElementById","textContent","firstList","secondList","Math","max","map","Number","toString","prev","newOrder","inserted","forEach","key","reorderedLists","insertIndex","indexOf","splice","concat","listNumber","_lists$listNumber","_lists$listNumber2","name","description","handleCancel","handleUpdate","checked","onChange","updatedSelection","num","handleListSelection","htmlFor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.3079cbce.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./index.css\";\n\nconst ErrorView = ({ onRetry }) => {\n  return (\n    <div className=\"error-view\">\n      <button onClick={onRetry}>\n        <img\n          alt=\"error view\"\n          src=\"https://assets.ccbp.in/frontend/content/react-js/list-creation-failure-lg-output.png\"\n        />\n      </button>\n    </div>\n  );\n};\n\nexport default ErrorView;\n","import React from \"react\";\nimport \"./index.css\";\n\nconst ActionButtons = ({ onCancel, onUpdate }) => {\n  return (\n    <div className=\"actions\">\n      <button onClick={onCancel}>Cancel</button>\n      <button onClick={onUpdate}>Update</button>\n    </div>\n  );\n};\n\nexport default ActionButtons;\n","\nimport React, { useState, useEffect } from \"react\";\nimport { RotatingLines } from \"react-loader-spinner\";\nimport axios from \"axios\";\nimport ErrorView from \"./components/ErrorView\";\nimport ActionButtons from \"./components/ActionButtons\";\nimport \"./App.css\";\n\nconst API_URL = \"https://apis.ccbp.in/list-creation/lists\";\n\nfunction App() {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  const [data, setData] = useState([]);\n  const [lists, setLists] = useState({});\n  const [listOrder, setListOrder] = useState([]);\n  const [selectedLists, setSelectedLists] = useState([]);\n  const [newListView, setNewListView] = useState(false);\n  const [newListKey, setNewListKey] = useState(null);\n  const [showCreateNewList, setShowCreateNewList] = useState(true);\n\n  console.log(data)\n  console.log(newListKey)\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  \n  const fetchData = async () => {\n    setLoading(true);\n    setError(false);\n    try {\n      const response = await axios.get(API_URL);\n      const { lists } = response.data;\n      const groupedLists = lists.reduce((acc, item) => {\n        if (!acc[item.list_number]) {\n          acc[item.list_number] = [];\n        }\n        acc[item.list_number].push(item);\n        return acc;\n      }, {});\n\n      const sortedListNumbers = Object.keys(groupedLists).sort((a, b) => a - b);\n      setData(lists);\n      setLists(groupedLists);\n      setListOrder(sortedListNumbers);\n      setLoading(false);\n    } catch (err) {\n      setError(true);\n      setLoading(false);\n    }\n  };\n\n  const handleListSelection = (listNumber) => {\n    const updatedSelection = selectedLists.includes(listNumber)\n      ? selectedLists.filter((num) => num !== listNumber)\n      : [...selectedLists, listNumber];\n    setSelectedLists(updatedSelection);\n  };\n\n  const handleCreateNewList = () => {\n    if (selectedLists.length !== 2) {\n      let alertForCheckEl = document.getElementById(\"alertForCheck\");\n      alertForCheckEl.textContent =\n        \"*You should select exactly 2 lists to create a new list\";\n      return;\n    }\n\n    setShowCreateNewList(false);\n    const [firstList, secondList] = selectedLists.sort((a, b) => a - b);\n    const nextListNumber = Math.max(...Object.keys(lists).map(Number)) + 1;\n    const newListKey = nextListNumber.toString();\n    setNewListKey(newListKey);\n\n    console.log(secondList);\n    setLists((prev) => {\n      const updatedLists = { ...prev };\n      const newOrder = [];\n\n      let inserted = false;\n      Object.keys(updatedLists)\n        .sort((a, b) => a - b)\n        .forEach((key) => {\n          newOrder.push(key);\n          if (key === firstList.toString() && !inserted) {\n            newOrder.push(newListKey);\n            inserted = true;\n          }\n        });\n\n      const reorderedLists = {};\n      newOrder.forEach((key) => {\n        reorderedLists[key] = updatedLists[key] || [];\n      });\n      reorderedLists[newListKey] = [];\n\n      return reorderedLists;\n    });\n\n    setListOrder((prevOrder) => {\n      const newOrder = [...prevOrder];\n      const insertIndex = newOrder.indexOf(firstList.toString()) + 1;\n      newOrder.splice(insertIndex, 0, newListKey);\n      return newOrder;\n    });\n\n    setNewListView(true);\n  };\n\n  const handleMoveItem = (item, fromList, toList = \"3\") => {\n    setLists((prevLists) => {\n      const updatedLists = { ...prevLists };\n\n      // Remove the item from the source list\n      const updatedFromList = (updatedLists[fromList] || []).filter(\n        (i) => i.id !== item.id\n      );\n\n      // Ensure the target list exists in the lists object\n      if (!updatedLists[toList]) {\n        updatedLists[toList] = [];\n      }\n\n      // Add the item to the target list\n      if (!updatedLists[toList].some((i) => i.id === item.id)) {\n        updatedLists[toList].push(item);\n      }\n\n      // Return the updated lists\n      return {\n        ...updatedLists,\n        [fromList]: updatedFromList, // Update the source list\n      };\n    });\n\n    // Ensure List 3 is included in the list order\n    setListOrder((prevOrder) => {\n      if (!prevOrder.includes(toList)) {\n        return [...prevOrder, toList];\n      }\n      return prevOrder;\n    });\n  };\n\n  const handleCancel = () => {\n    setShowCreateNewList(true);\n    setNewListView(false);\n    setSelectedLists([]);\n    fetchData();\n  };\n\n  const handleUpdate = () => {\n    setShowCreateNewList(true);\n    setNewListView(false);\n    setSelectedLists([]);\n\n    setLists((prevLists) => {\n      const updatedLists = { ...prevLists };\n      if (updatedLists[\"3\"]) {\n        updatedLists[\"3\"] = [...updatedLists[\"3\"]];\n      }\n      return updatedLists;\n    });\n\n    setListOrder((prevOrder) => {\n      return [...prevOrder];\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      {loading ? (\n        <div className=\"loader\">\n          <RotatingLines\n            strokeColor=\"grey\"\n            strokeWidth=\"5\"\n            animationDuration=\"0.75\"\n            width=\"96\"\n            visible={true}\n          />\n        </div>\n      ) : error ? (\n        <ErrorView onRetry={fetchData} />\n      ) : (\n        <div className=\"main-container\">\n          <div className=\"head-btn-container\">\n            {showCreateNewList && (\n              <>\n                <h1 className=\"main-heading\">List Creation</h1>\n                <button\n                  type=\"button\"\n                  className=\"add-new-list-button\"\n                  onClick={handleCreateNewList}\n                >\n                  Create a New List\n                </button>\n              </>\n            )}\n            <span id=\"alertForCheck\"></span>\n          </div>\n\n          <div className={`lists-container ${newListView ? \"row\" : \"\"}`}>\n            {newListView ? (\n              <div>\n                <div className=\"list-creation-view\">\n                  {listOrder.map((listNumber) => (\n                    <div key={listNumber} className=\"list-container\">\n                      <h3>\n                        List {listNumber} ({lists[listNumber]?.length || 0}{\" \"}\n                        items)\n                      </h3>\n                      <div className=\"list-item-container\">\n                        {lists[listNumber]?.map((item) => (\n                          <div key={item.id} className=\"list-item\">\n                            <span className=\"name\">{item.name}</span>\n                            <span className=\"description\">\n                              {item.description}\n                            </span>\n\n                            {/* Arrow buttons for moving items */}\n                            <div className=\"arrow-buttons\">\n                              {listNumber === \"1\" && (\n                                <button\n                                  className=\"arrow\"\n                                  onClick={() => handleMoveItem(item, \"1\", \"3\")}\n                                >\n                                  →\n                                </button>\n                              )}\n                              {listNumber === \"2\" && (\n                                <button\n                                  className=\"arrow\"\n                                  onClick={() => handleMoveItem(item, \"2\", \"3\")}\n                                >\n                                  ←\n                                </button>\n                              )}\n                              {listNumber === \"3\" && (\n                                <div className=\"arrow-buttons-row\">\n                                  <button\n                                    className=\"arrow start-arrow\"\n                                    onClick={() =>\n                                      handleMoveItem(item, \"3\", \"1\")\n                                    }\n                                  >\n                                    ←\n                                  </button>\n                                  <button\n                                    className=\"arrow end-arrow\"\n                                    onClick={() =>\n                                      handleMoveItem(item, \"3\", \"2\")\n                                    }\n                                  >\n                                    →\n                                  </button>\n                                </div>\n                              )}\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n\n                <ActionButtons\n                  onCancel={handleCancel}\n                  onUpdate={handleUpdate}\n                />\n              </div>\n            ) : (\n              <>\n                <div className=\"list-selection\">\n                  {listOrder.map((listNumber) => (\n                    <div key={listNumber} className=\"list-container\">\n                      <div className=\"check-heading\">\n                        <input\n                          id={`myCheckbox + ${listNumber}`}\n                          type=\"checkbox\"\n                          checked={selectedLists.includes(listNumber)}\n                          onChange={() => handleListSelection(listNumber)}\n                        />\n                        <label\n                          htmlFor={`myCheckbox + ${listNumber}`}\n                          className=\"list-head\"\n                        >\n                          List {listNumber}\n                        </label>\n                      </div>\n                      {lists[listNumber].map((item) => (\n                        <div className=\"list-item\" key={item.id}>\n                          <span className=\"name\">{item.name}</span>\n                          <span className=\"description\">\n                            {item.description}\n                          </span>\n                        </div>\n                      ))}\n                    </div>\n                  ))}\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}